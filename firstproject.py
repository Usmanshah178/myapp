# -*- coding: utf-8 -*-
"""Firstproject.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1Xvo04g5kMRlsa8hsoisfdP15JGcCXwPx
"""


import streamlit as st
import ee
import folium


import datetime

# Initialize GEE
try:
    ee.Initialize(project='ee-91521stugis')
except Exception:
    ee.Authenticate()
    ee.Initialize(project='ee-91521stugis')

# Load Punjab
punjab = ee.FeatureCollection("FAO/GAUL/2015/level1").filter(
    ee.Filter.And(
        ee.Filter.eq('ADM1_NAME', 'Punjab'),
        ee.Filter.eq('ADM0_NAME', 'Pakistan')
    )
)

# Sidebar inputs
st.sidebar.header("Suitability Parameters")

# Weight sliders
temp_weight = st.sidebar.slider("Temperature Weight", 0.0, 1.0, 0.05, 0.01)
rainfall_weight = st.sidebar.slider("Rainfall Weight", 0.0, 1.0, 0.17, 0.01)
ph_weight = st.sidebar.slider("Soil pH Weight", 0.0, 1.0, 0.07, 0.01)
slope_weight = st.sidebar.slider("Slope Weight", 0.0, 1.0, 0.06, 0.01)
texture_weight = st.sidebar.slider("Texture Weight", 0.0, 1.0, 0.10, 0.01)
evap_weight = st.sidebar.slider("Evaporation Weight", 0.0, 1.0, 0.02, 0.01)
som_weight = st.sidebar.slider("SOM Weight", 0.0, 1.0, 0.04, 0.01)
lulc_weight = st.sidebar.slider("LULC Weight", 0.0, 1.0, 0.09, 0.01)
water_weight = st.sidebar.slider("Water Proximity Weight", 0.0, 1.0, 0.35, 0.01)

# Date inputs
temp_dates = st.sidebar.date_input("Temperature Date Range", [datetime.date(2023,10,1), datetime.date(2024,3,31)])
rainfall_dates = st.sidebar.date_input("Rainfall Date Range", [datetime.date(2023,1,1), datetime.date(2023,12,31)])
lulc_dates = st.sidebar.date_input("LULC Date Range", [datetime.date(2024,1,1), datetime.date(2024,12,31)])

# Check weight total
total_weight = sum([temp_weight, rainfall_weight, ph_weight, slope_weight, texture_weight,
                    evap_weight, som_weight, lulc_weight, water_weight])
if total_weight != 1:
    st.error("Total weight must equal 1. Adjust the sliders.")
    st.stop()

# Button to generate map
if st.button("Generate Suitability Map"):
    # Convert date inputs to strings
    temp_start = str(temp_dates[0])
    temp_end = str(temp_dates[1])
    rain_start = str(rainfall_dates[0])
    rain_end = str(rainfall_dates[1])
    lulc_start = str(lulc_dates[0])
    lulc_end = str(lulc_dates[1])

    # Temperature
    tempRaw = ee.ImageCollection("IDAHO_EPSCOR/TERRACLIMATE") \
        .filterDate(temp_start, temp_end) \
        .select('tmmn') \
        .mean() \
        .clip(punjab) \
        .subtract(273.15)

    temp = tempRaw.subtract(25).abs().multiply(-1).add(1).divide(5).clamp(0, 1)

    # Rainfall
    rainfall = ee.ImageCollection('UCSB-CHG/CHIRPS/DAILY') \
        .filterDate(rain_start, rain_end) \
        .filterBounds(punjab) \
        .sum() \
        .clip(punjab) \
        .subtract(1250).abs().multiply(-1).add(1).divide(250).clamp(0, 1)

    # Soil pH
    ph = ee.Image("projects/soilgrids-isric/phh2o_mean") \
        .select('phh2o_0-5cm_mean') \
        .clip(punjab) \
        .subtract(7.0).abs().multiply(-1).add(1).divide(0.5).clamp(0, 1)

    # Slope
    dem = ee.Image("USGS/SRTMGL1_003").clip(punjab)
    slope = ee.Terrain.slope(dem).multiply(-1).add(15).divide(15).clamp(0, 1)

    # Soil Texture
    sand = ee.Image("projects/soilgrids-isric/sand_mean").select('sand_0-5cm_mean').clip(punjab)
    silt = ee.Image("projects/soilgrids-isric/silt_mean").select('silt_0-5cm_mean').clip(punjab)
    clay = ee.Image("projects/soilgrids-isric/clay_mean").select('clay_0-5cm_mean').clip(punjab)

    textureClass = sand.addBands(silt).addBands(clay).expression(
        "(sand >= 70 && clay < 15) ? 1 :" +
        "(sand >= 52 && clay >= 7 && clay < 20) ? 2 :" +
        "(sand >= 43 && sand < 52 && clay >= 7 && clay < 27) ? 3 :" +
        "(clay >= 27 && clay < 40 && sand > 20) ? 4 :" +
        "(silt >= 50 && clay < 12) ? 5 :" +
        "(clay >= 35) ? 6 :" +
        "(sand < 20 && silt > 40 && clay >= 20) ? 7 :" +
        "(sand > 35 && clay >= 20 && clay < 35) ? 8 : 9",
        {
            'sand': sand,
            'silt': silt,
            'clay': clay
        }
    ).rename('textureClass')

    textureSuit = textureClass.remap(
        [1, 2, 3, 4, 5, 6, 7, 8, 9],
        [0.3, 0.5, 0.9, 0.6, 0.8, 0.4, 0.7, 0.6, 0.3]
    ).rename('textureSuit')

    # Evaporation
    evap = ee.ImageCollection("IDAHO_EPSCOR/TERRACLIMATE") \
        .filterDate(temp_start, temp_end) \
        .select('aet') \
        .mean() \
        .clip(punjab)

    evaporation = evap.subtract(600).abs().multiply(-1).add(1).divide(200).clamp(0, 1)

    # Soil Organic Matter
    som = ee.Image("projects/soilgrids-isric/ocd_mean") \
        .select('ocd_0-5cm_mean') \
        .clip(punjab) \
        .divide(30) \
        .clamp(0, 1)

    # LULC
    lulc = ee.ImageCollection("GOOGLE/DYNAMICWORLD/V1") \
        .filterDate(lulc_start, lulc_end) \
        .filterBounds(punjab) \
        .select('label') \
        .mode() \
        .clip(punjab)

    lulcSuit = lulc.remap(
        [0, 1, 2, 3, 4, 5, 6, 7, 8, 9],
        [0.2, 1.0, 0.8, 0.6, 0.1, 0, 0.1, 0.3, 0.2, 0]
    ).rename('lulcSuit')

    # Proximity to Water
    waterMask = ee.Image("JRC/GSW1_4/GlobalSurfaceWater") \
        .select('occurrence') \
        .gte(50) \
        .clip(punjab)

    distanceToWater = waterMask.Not().fastDistanceTransform().sqrt().multiply(30)
    waterProximitySuit = distanceToWater.divide(5000).multiply(-1).add(1).clamp(0, 1).rename('waterProximitySuit')

    # Weighted Overlay
    finalSuitability = textureSuit.multiply(texture_weight) \
        .add(ph.multiply(ph_weight)) \
        .add(rainfall.multiply(rainfall_weight)) \
        .add(temp.multiply(temp_weight)) \
        .add(slope.multiply(slope_weight)) \
        .add(evaporation.multiply(evap_weight)) \
        .add(som.multiply(som_weight)) \
        .add(lulcSuit.multiply(lulc_weight)) \
        .add(waterProximitySuit.multiply(water_weight)) \
        .clamp(0, 1)

    # Threshold
    suitable = finalSuitability.gte(0.5).rename('suitable')

    # Create tile URL
    tile_url = suitable.getMapId({
        'min': 0, 'max': 1,
        'palette': ['red', 'green']
    })['tile_fetcher'].url_format

    # Center map
    bounds = punjab.geometry().bounds().getInfo()['coordinates'][0]
    center_lat = (bounds[0][1] + bounds[2][1]) / 2
    center_lon = (bounds[0][0] + bounds[2][0]) / 2

    # Display map with tile
    m = folium.Map(location=[center_lat, center_lon], zoom_start=7)
    folium.TileLayer(tiles=tile_url, name='Suitability', attr='GEE').add_to(m)
    folium.LayerControl().add_to(m)

    # Show map in Streamlit
    st_folium(m, width=800, height=600)

    suitable = ee.Image.constant(1).clip(punjab).rename('suitable')  # Replace with actual

    # Convert to Folium tile
    tile_url = suitable.getMapId({
        'min': 0, 'max': 1,
        'palette': ['red', 'green']
    })['tile_fetcher'].url_format

    # Center map on Punjab
    bounds = punjab.geometry().bounds().getInfo()['coordinates'][0]
    center_lat = (bounds[0][1] + bounds[2][1]) / 2
    center_lon = (bounds[0][0] + bounds[2][0]) / 2

    # Create map
    m = folium.Map(location=[center_lat, center_lon], zoom_start=7)
    folium.TileLayer(tiles=tile_url, name='Suitability', attr='GEE').add_to(m)

    folium.LayerControl().add_to(m)

    # Display map
    st_data = st_folium(m, width=800, height=600)
